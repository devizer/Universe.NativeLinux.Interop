# AGENT_OS=Linux|Darwin|Windows_NT

steps:

  - bash: |
      sudo rm -f /usr/local/bin/Say || true
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      echo "AGENT_OS: '${AGENT_OS}'"
      dotnet --info
    displayName: 'Install dotnet sdk 3.1 on linux/osx'

  - bash: |
      sudo apt-get install nuget || true;
      nuget >/tmp/nuget-ver
      cat /tmp/nuget-ver | head -1
    displayName: 'Install NuGET'


  - script: |
      time list-packages
    condition: eq(variables['OS'], 'Linux')
    displayName: 'List Packages'

  - script: |
      pushd so-src>/dev/null
      bash re-build-local.sh
      popd>/dev/null
    displayName: 're-build-local.sh'

  - script: |
      pushd so-src>/dev/null
      bash rebuild-all.sh
      popd>/dev/null
    displayName: 'rebuild-all.sh: libNativeLinuxInterop.so'

  - script: |
      rm -rf ./runtimes || true 
      pushd so-src>/dev/null
      bash deploy-to-runtimes.sh
      popd>/dev/null
    displayName: 'reset versioned runtimes: deploy-to-runtimes.sh'

  - script: |
      set -e
      pushd Universe.LinuxTaskstat>/dev/null
      # dotnet test -f netcoreapp3.1 -c Debug
      bash test-as-root.sh
      popd>/dev/null
    displayName: 'dotnet test as root'

  - script: |
      set -e
      to=$(pwd)/packages; mkdir -p $to
      
      pushd Universe.LinuxTaskstat/Universe.LinuxTaskstat>/dev/null
      
      # pre prelease
      export NUPKG_PACKAGE_SUFFIX="-pre"
      source build-nuget.sh
      cp -f $nupkg_full_name $to/
      Say "Publishing [$nupkg_full_name]"
      cmd="nuget push $nupkg_full_name $MY_TASKSTAT_NUGET -Timeout 600 -Source https://www.nuget.org/api/v2/package"
      # echo $cmd
      try-and-retry eval "$cmd"
      
      # release
      export NUPKG_PACKAGE_SUFFIX=""
      source build-nuget.sh
      cp -f $nupkg_full_name $to/
      
      popd>/dev/null
    condition: succeededOrFailed()
    displayName: 'build 2 nugets'
    env:
      MY_TASKSTAT_NUGET: $(TASKSTAT_NUGET)



  - script: |
      Show-System-Stat || true
      df -h -T
    condition: succeededOrFailed()
    displayName: 'System Stat'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)/so-src/runtimes'
      artifactName: 'Runtimes'
      
  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)'
      artifactName: 'Working'
      
  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)/packages'
      artifactName: 'Packages'
      
